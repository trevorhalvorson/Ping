apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def props = project.getProperties()

def titleText, titleTextSize, titleTextColor
def imageUrl, imageWidth, imageHeight, imageScaleType
def copyText, copyTextSize, copyTextColor
def sendButtonText, sendButtonTextColor, sendButtonBackgroundColor
def phoneInputTextColor, phoneInputBackgroundColor
def numPadTextColor, numPadBackgroundColor
def backgroundColor
def pin
def message
def urlBase, urlPath

task(configure) {
    titleText = props.get("titleText")
    titleTextSize = props.get("titleTextSize")
    titleTextColor = props.get("titleTextColor")

    imageUrl = props.get("imageUrl")
    imageWidth = props.get("imageWidth")
    imageHeight = props.get("imageHeight")
    imageScaleType = props.get("imageScaleType")

    copyText = props.get("copyText")
    copyTextSize = props.get("copyTextSize")
    copyTextColor = props.get("copyTextColor")

    sendButtonText = props.get("sendButtonText")
    sendButtonTextColor = props.get("sendButtonTextColor")
    sendButtonBackgroundColor = props.get("sendButtonBackgroundColor")

    phoneInputTextColor = props.get("phoneInputTextColor")
    phoneInputBackgroundColor = props.get("phoneInputBackgroundColor")

    numPadTextColor = props.get("numPadTextColor")
    numPadBackgroundColor = props.get("numPadBackgroundColor")

    backgroundColor = props.get("backgroundColor")

    pin = props.get("pin")

    message = props.get("message")

    urlBase = props.get("urlBase")
    urlPath = props.get("urlPath")
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.trevorhalvorson.ping"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            def keystorePropsFile = rootProject.file("keystore.properties")
            if (keystorePropsFile.exists()) {
                def signingProps = new Properties()
                signingProps.load(new FileInputStream(keystorePropsFile))
                if (signingProps.get("storeFile") != null) {
                    storeFile file(signingProps.get("storeFile"))
                    storePassword signingProps.get("storePassword")
                    keyAlias signingProps.get("keyAlias")
                    keyPassword signingProps.get("keyPassword")
                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release

            buildConfigField("String", "TITLE_TEXT", "$titleText")
            buildConfigField("float", "TITLE_TEXT_SIZE", "$titleTextSize")
            buildConfigField("int", "TITLE_TEXT_COLOR", "$titleTextColor")

            buildConfigField("String", "IMAGE_URL", "$imageUrl")
            buildConfigField("float", "IMAGE_WIDTH", "$imageWidth")
            buildConfigField("float", "IMAGE_HEIGHT", "$imageHeight")
            buildConfigField("String", "IMAGE_SCALE_TYPE", "$imageScaleType")

            buildConfigField("String", "COPY_TEXT", "$copyText")
            buildConfigField("float", "COPY_TEXT_SIZE", "$copyTextSize")
            buildConfigField("int", "COPY_TEXT_COLOR", "$copyTextColor")

            buildConfigField("String", "SEND_BUTTON_TEXT", "$sendButtonText")
            buildConfigField("int", "SEND_BUTTON_TEXT_COLOR", "$sendButtonTextColor")
            buildConfigField("int", "SEND_BUTTON_BACKGROUND_COLOR", "$sendButtonBackgroundColor")

            buildConfigField("int", "PHONE_INPUT_TEXT_COLOR", "$phoneInputTextColor")
            buildConfigField("int", "PHONE_INPUT_BACKGROUND_COLOR", "$phoneInputBackgroundColor")

            buildConfigField("int", "NUM_PAD_TEXT_COLOR", "$numPadTextColor")
            buildConfigField("int", "NUM_PAD_BACKGROUND_COLOR", "$numPadBackgroundColor")

            buildConfigField("int", "BACKGROUND_COLOR", "$backgroundColor")

            buildConfigField("String", "PIN", "$pin")

            buildConfigField("String", "MESSAGE", "$message")

            buildConfigField("String", "URL_BASE", "$urlBase")
            buildConfigField("String", "URL_PATH", "$urlPath")
        }
        debug {
            buildConfigField("String", "TITLE_TEXT", '"TEST TITLE"')
            buildConfigField("float", "TITLE_TEXT_SIZE", "40F")
            buildConfigField("int", "TITLE_TEXT_COLOR", "0xFF000000")

            buildConfigField("String", "IMAGE_URL", '"https://avatars1.githubusercontent.com/u/30177?v=4&s=200"')
            buildConfigField("float", "IMAGE_WIDTH", "250F")
            buildConfigField("float", "IMAGE_HEIGHT", "250F")
            buildConfigField("String", "IMAGE_SCALE_TYPE", '"CENTER_CROP"')

            buildConfigField("String", "COPY_TEXT", '"Lorem ipsum dolor sit amet, suavitate forensibus an vix, an per rebum periculis liberavisse."')
            buildConfigField("float", "COPY_TEXT_SIZE", "20F")
            buildConfigField("int", "COPY_TEXT_COLOR", "0xFF000000")

            buildConfigField("String", "SEND_BUTTON_TEXT", '"SEND MESSAGE"')
            buildConfigField("int", "SEND_BUTTON_TEXT_COLOR", "0xFF000000")
            buildConfigField("int", "SEND_BUTTON_BACKGROUND_COLOR", "0xFFCCCCCC")

            buildConfigField("int", "PHONE_INPUT_TEXT_COLOR", "0xFF000000")
            buildConfigField("int", "PHONE_INPUT_BACKGROUND_COLOR", "0xFFFFFFFF")

            buildConfigField("int", "NUM_PAD_TEXT_COLOR", "0xFF000000")
            buildConfigField("int", "NUM_PAD_BACKGROUND_COLOR", "0xFFFFFFFF")

            buildConfigField("int", "BACKGROUND_COLOR", "0xFFFFFFFF")

            buildConfigField("String", "PIN", '"0000"')

            buildConfigField("String", "MESSAGE", '"Test message from device"')

            buildConfigField("String", "URL_BASE", '"http://localhost:3000"')
            buildConfigField("String", "URL_PATH", '"ping/test"')
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "com.android.support:appcompat-v7:26.1.0"
    implementation "com.android.support:design:26.1.0"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    implementation "com.squareup.retrofit2:retrofit:2.3.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
    implementation "com.squareup.retrofit2:converter-gson:2.3.0"

    implementation "com.squareup.okhttp3:okhttp:3.8.1"
    implementation "com.squareup.okhttp3:logging-interceptor:3.8.1"

    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    implementation "io.reactivex.rxjava2:rxkotlin:2.1.0"

    implementation "com.github.bumptech.glide:glide:4.0.0"

    implementation "com.google.dagger:dagger:2.11"
    implementation "com.google.dagger:dagger-android-support:2.11"

    implementation "javax.inject:javax.inject:1"

    implementation 'com.github.material-foundation.material-remixer-android:remixer:develop-SNAPSHOT'

    kapt 'com.github.material-foundation.material-remixer-android:remixer_annotation:1.0'
    kapt "javax.annotation:jsr250-api:1.0"
    kapt "com.google.dagger:dagger-compiler:2.11"
    kapt "com.google.dagger:dagger-android-processor:2.11"

    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testImplementation 'junit:junit:4.12'
}
